// <auto-generated/>

// Crest Water System
// Copyright Â© 2024 Wave Harmonic. All rights reserved.

using WaveHarmonic.Crest.Splines;
using WaveHarmonic.Crest.Paint;

namespace WaveHarmonic.Crest
{
    static partial class _Extensions
    {
        static void AddData(LodInput input, LodInputMode mode)
        {
            switch (mode)
            {
                case LodInputMode.Renderer when input is AbsorptionLodInput: AddData<AbsorptionRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is AbsorptionLodInput: AddData<AbsorptionTextureLodInputData>(input, mode); break;
#if d_CrestSplines
                case LodInputMode.Spline when input is AbsorptionLodInput: AddData<AbsorptionSplineLodInputData>(input, mode); break;
#endif
#if d_CrestPaint
                case LodInputMode.Paint when input is AbsorptionLodInput: AddData<AbsorptionPaintLodInputData>(input, mode); break;
#endif
                case LodInputMode.Renderer when input is AlbedoLodInput: AddData<AlbedoRendererLodInputData>(input, mode); break;
                case LodInputMode.Renderer when input is AnimatedWavesLodInput: AddData<AnimatedWavesRendererLodInputData>(input, mode); break;
                case LodInputMode.Renderer when input is ClipLodInput: AddData<ClipRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is ClipLodInput: AddData<ClipTextureLodInputData>(input, mode); break;
#if d_CrestPaint
                case LodInputMode.Paint when input is ClipLodInput: AddData<ClipPaintLodInputData>(input, mode); break;
#endif
                case LodInputMode.Renderer when input is DepthLodInput: AddData<DepthRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is DepthLodInput: AddData<DepthTextureLodInputData>(input, mode); break;
                case LodInputMode.Geometry when input is DepthLodInput: AddData<DepthGeometryLodInputData>(input, mode); break;
                case LodInputMode.Renderer when input is DynamicWavesLodInput: AddData<DynamicWavesRendererLodInputData>(input, mode); break;
                case LodInputMode.Renderer when input is FlowLodInput: AddData<FlowRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is FlowLodInput: AddData<FlowTextureLodInputData>(input, mode); break;
#if d_CrestPaint
                case LodInputMode.Paint when input is FlowLodInput: AddData<FlowPaintLodInputData>(input, mode); break;
#endif
#if d_CrestSplines
                case LodInputMode.Spline when input is FlowLodInput: AddData<FlowSplineLodInputData>(input, mode); break;
#endif
                case LodInputMode.Renderer when input is FoamLodInput: AddData<FoamRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is FoamLodInput: AddData<FoamTextureLodInputData>(input, mode); break;
#if d_CrestPaint
                case LodInputMode.Paint when input is FoamLodInput: AddData<FoamPaintLodInputData>(input, mode); break;
#endif
#if d_CrestSplines
                case LodInputMode.Spline when input is FoamLodInput: AddData<FoamSplineLodInputData>(input, mode); break;
#endif
                case LodInputMode.Renderer when input is LevelLodInput: AddData<LevelRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is LevelLodInput: AddData<LevelTextureLodInputData>(input, mode); break;
#if d_CrestPaint
                case LodInputMode.Paint when input is LevelLodInput: AddData<LevelPaintLodInputData>(input, mode); break;
#endif
#if d_CrestSplines
                case LodInputMode.Spline when input is LevelLodInput: AddData<LevelSplineLodInputData>(input, mode); break;
#endif
                case LodInputMode.Geometry when input is LevelLodInput: AddData<LevelGeometryLodInputData>(input, mode); break;
                case LodInputMode.Renderer when input is ScatteringLodInput: AddData<ScatteringRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is ScatteringLodInput: AddData<ScatteringTextureLodInputData>(input, mode); break;
#if d_CrestSplines
                case LodInputMode.Spline when input is ScatteringLodInput: AddData<ScatteringSplineLodInputData>(input, mode); break;
#endif
#if d_CrestPaint
                case LodInputMode.Paint when input is ScatteringLodInput: AddData<ScatteringPaintLodInputData>(input, mode); break;
#endif
                case LodInputMode.Renderer when input is ShadowLodInput: AddData<ShadowRendererLodInputData>(input, mode); break;
                case LodInputMode.Renderer when input is ShapeWaves: AddData<ShapeWavesRendererLodInputData>(input, mode); break;
                case LodInputMode.Texture when input is ShapeWaves: AddData<ShapeWavesTextureLodInputData>(input, mode); break;
#if d_CrestPaint
                case LodInputMode.Paint when input is ShapeWaves: AddData<ShapeWavesPaintLodInputData>(input, mode); break;
#endif
#if d_CrestSplines
                case LodInputMode.Spline when input is ShapeWaves: AddData<ShapeWavesSplineLodInputData>(input, mode); break;
#endif
            }
        }
    }
}
