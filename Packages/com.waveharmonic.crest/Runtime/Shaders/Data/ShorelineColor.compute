// Crest Water System
// Copyright Â© 2024 Wave Harmonic. All rights reserved.

#pragma kernel CrestShorelineColor

#pragma multi_compile_local __ d_Crest_ShorelineColorSource_ShorelineDistance
#pragma multi_compile_local __ d_Crest_ShorelineScattering

#include "HLSLSupport.cginc"

#include "Packages/com.waveharmonic.crest/Runtime/Shaders/Library/Macros.hlsl"
#include "Packages/com.waveharmonic.crest/Runtime/Shaders/Library/Constants.hlsl"
#include "Packages/com.waveharmonic.crest/Runtime/Shaders/Library/Globals.hlsl"
#include "Packages/com.waveharmonic.crest/Runtime/Shaders/Library/InputsDriven.hlsl"
#include "Packages/com.waveharmonic.crest/Runtime/Shaders/Library/Cascade.hlsl"

RWTexture2DArray<float3> _Crest_Target;

CBUFFER_START(CrestPerMaterial)
float _Crest_ShorelineColorMaximumDistance;
float _Crest_ShorelineColorFalloff;
half3 _Crest_ShorelineColor;
CBUFFER_END

m_CrestNameSpace

void ShorelineColor(uint3 id)
{
    const uint slice0 = id.z;
    const Cascade cascade =
#if d_Crest_ShorelineScattering
        Cascade::MakeScattering(slice0);
#else
        Cascade::MakeAbsorption(slice0);
#endif
    const float2 worldXZ = cascade.IDToWorld(id.xy);

    const half depth = Cascade::MakeDepth(slice0)
#if d_Crest_ShorelineColorSource_ShorelineDistance
        .SampleShorelineDistance(worldXZ);
#else
        .SampleSignedDepthFromSeaLevel(worldXZ);
#endif

    const float shallowness = pow(1.0 - saturate(depth / _Crest_ShorelineColorMaximumDistance), _Crest_ShorelineColorFalloff);
    _Crest_Target[id] = lerp(_Crest_Target[id], _Crest_ShorelineColor, shallowness);
}

m_CrestNameSpaceEnd

m_CrestKernelDefault(ShorelineColor)
